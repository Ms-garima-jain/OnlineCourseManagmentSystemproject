package Main;

import java.sql.SQLException;
import java.util.InputMismatchException;
import java.util.List;
import java.util.Scanner;

import com.infobeans.Service.CourseService;
import com.infobeans.Service.EnrollmentService;
import com.infobeans.Service.StudentService;
import com.infobeans.model.Course;
import com.infobeans.model.Enrollment;
import com.infobeans.model.Student;

public class Main {
    public static void main(String[] args) throws Exception {
        Scanner scn = new Scanner(System.in);
        StudentService ss = new StudentService(); 
        CourseService cc = new CourseService();
        EnrollmentService es = new EnrollmentService ();
        int choice;

        // Start do-while loop
        do {
            // Display the main menu
            System.out.println("\n=========================");
            System.out.println("üéì Online Course Enrollment System üéì");
            System.out.println("=========================");
            System.out.println("1. Manage Students");
            System.out.println("2. Manage Courses");
            System.out.println("3. Manage Enrollments");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            while (true)
            {
            	if (scn.hasNextInt())
            	{
            		choice = scn.nextInt();
                    break;	
            	}
            	else
            	{
            		System.out.println("‚ùå Invalid input! Please enter a number.");
                    scn.next(); // clear wrong input
                    System.out.print("Enter your choice: ");
            	}
            }

            switch (choice) {
                case 1:
                    System.out.println("üìö Managing Students...");
                    manageStudents(ss); // Pass StudentService to manageStudents()
                    break;
                case 2:
                    System.out.println("üìö Managing Courses...");
                    manageCourses(cc); // ‚úÖ Fixed - Pass CourseService to manageCourses()
                    break;
                case 3:
                    System.out.println("üìù Managing Enrollments...");
                    manageEnrollments(es, scn);
                    break;
                case 4:
                    System.out.println("‚úÖ Exiting... Thank you for using the system!");
                    break;
                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
            }
        } while (choice != 4);

        // Close Scanner to avoid resource leak
        scn.close();
    }

    // üìö Manage Students Operations
    public static void manageStudents(StudentService ss) throws Exception {
        Scanner scn = new Scanner(System.in);
        int choice;
        do {
            System.out.println("\n--- Manage Students ---");
            System.out.println("1. Add Student");
            System.out.println("2. View All Students");
            System.out.println("3. Get Student by ID");
            System.out.println("4. Update Student");
            System.out.println("5. Delete Student");
            System.out.println("6. Count Total Students");
            System.out.println("7. Search Student By Name");
            System.out.println("8. Return to Main Menu");
            System.out.print("Enter your choice: ");

            while (true) {
                if (scn.hasNextInt()) {
                    choice = scn.nextInt();
                    break;
                } else {
                    System.out.println("‚ùå Invalid input! Please enter a number.");
                    scn.next(); // consume invalid input
                    System.out.print("Enter your choice: ");
                }
            }

            scn.nextLine(); // Consume the newline

            switch (choice) {
                case 1:
                    System.out.print("Enter student name: ");
                    String name = scn.nextLine();
                    System.out.print("Enter student email: ");
                    String email = scn.nextLine();
                    System.out.print("Enter student contact number: ");
                    String contactNumber = scn.nextLine();
                    System.out.print("Enter registration date (yyyy-MM-dd): ");
                    String registrationDate = scn.nextLine();

                    // Add student with correct parameters
                    boolean success = ss.addStudent(name, email, contactNumber, registrationDate);
                    if (success) {
                        System.out.println("‚úÖ Student added successfully!");
                    } 
                    break;

                case 2:
                    System.out.println("üìö List of All Students");
                    List<Student> students = ss.fetchAllStudents();
                    System.out.println("\n=========================================================");
                    System.out.printf("| %-5s | %-12s | %-20s | %-12s | %-12s |\n",
                            "ID", "Name", "Email", "Contact No", "Reg. Date");
                    System.out.println("=========================================================");
                    for (Student s : students) {
                        System.out.printf("| %-5d | %-12s | %-20s | %-12s | %-12s |\n",
                                s.getStudentId(), s.getName(), s.getEmail(), s.getContactno(), s.getRegistrarionDate());
                    }
                    System.out.println("=========================================================");
                    break;

                case 3:                	 
                	
                	    System.out.print("Enter student ID to search: ");
                	    
                	    if (scn.hasNextInt()) {
                	        int idd = scn.nextInt();
                	        ss.FetchId(idd);
                	        break; // exit loop after successful input
                	    } else {
                	        System.out.println("‚ùå Invalid input! Please enter a valid student ID (numbers only).");
                	        scn.next(); // clear the invalid input
                	    }
                	


                case 4:
                	int updateId;
                    while (true) {
                        System.out.print("Enter student ID to update: ");
                        if (scn.hasNextInt()) {
                            updateId = scn.nextInt();
                            break; // valid input received, break the loop
                        } else {
                            System.out.println("‚ùå Invalid input! Please enter a valid student ID (numbers only).");
                            scn.next(); // clear invalid input
                        }
                    }
                    ss.updateStudentDynamic(updateId, scn);
                    break;
                    

                case 5:
                	int dstuid;
                    while (true) {
                        System.out.print("Enter student ID to delete: ");
                        if (scn.hasNextInt()) {
                            dstuid = scn.nextInt();
                            break;
                        } else {
                            System.out.println("‚ùå Invalid input! Please enter a valid student ID (numbers only).");
                            scn.next(); // clear invalid input
                        }
                    }
                    ss.deleteStudent(dstuid, scn);
                    break;

                case 6:
                    int count = ss.getTotalStudentCount();
                    System.out.println("üìö Total Students: " + count);
                    break;

                case 7:
                	 // Add a new case for search
                    System.out.print("Enter student name to search: ");
                    String searchName = scn.nextLine();
                    List<Student> searchResults = ss.searchStudentByName(searchName);
                    if (searchResults.isEmpty()) {
                        System.out.println("No students found with name: " + searchName);
                    } else {
                        System.out.println("\nSearch Results:");
                        System.out.println("======================================================================================================");
                        System.out.printf("| %-5s | %-12s | %-20s | %-12s | %-12s |\n", "ID", "Name", "Email", "Contact No", "Reg. Date");
                        System.out.println("======================================================================================================");
                        for (Student student : searchResults) {
                            System.out.printf("| %-5d | %-12s | %-20s | %-12s | %-12s |\n", student.getStudentId(), student.getName(), student.getEmail(), student.getContactno(), student.getRegistrarionDate());
                        }
                        System.out.println("======================================================================================================");
                    }

                    break;

                

                case 8:
                    System.out.println("üîô Returning to main menu...");
                    break;

                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
                    break;
            }
        } while (choice != 8); // ‚úÖ Corrected exit condition
    }

    // üìö Manage Course Operations
    private static void manageCourses(CourseService cc) throws SQLException {
        Scanner sc = new Scanner(System.in);
        int choice;
        do {
            System.out.println("\n--- Manage Courses ---");
            System.out.println("1. Add Course");
            System.out.println("2. View All Courses");
            System.out.println("3. Get Course by ID");
            System.out.println("4. Update Course Field");
            System.out.println("5. Delete Course");
            System.out.println("6. Update All Course Details");

            System.out.println("7. Go Back");
            
            while (true) {
                System.out.print("Enter your choice: ");
                if (sc.hasNextInt()) {
                    choice = sc.nextInt();
                    sc.nextLine(); // consume newline
                    break;
                } else {
                    System.out.println("‚ùå Invalid input! Please enter a number.");
                    sc.next(); // clear bad input
                }
            }
            switch (choice) {
                case 1:
                    System.out.print("Enter course name: ");
                    String courseName = sc.nextLine();

                    int duration = 0;
                    while (true) {
                        System.out.print("Enter duration (in months): ");
                        if (sc.hasNextInt()) {
                            duration = sc.nextInt();
                            sc.nextLine(); // consume newline
                            break;
                        } else {
                            System.out.println("‚ùå Invalid input. Please enter a valid number for duration.");
                            sc.next(); // clear invalid input
                        }
                    }
                    
                    double fees = 0;
                    while (true) {
                        System.out.print("Enter fees: ");
                        if (sc.hasNextDouble()) {
                            fees = sc.nextDouble();
                            sc.nextLine(); // consume newline
                            break;
                        } else {
                            System.out.println("‚ùå Invalid input. Please enter a valid amount for fees.");
                            sc.next(); // clear invalid input
                        }
                    }

                    // Now call addCourse
                    boolean success = cc.addCourse(courseName, duration, fees);
                    if (success) {
                        System.out.println("‚úÖ Course added successfully!");
                    } else {
                        System.out.println("‚ùå Failed to add course. Check input values.");
                    }
                    break;
                case 2: 
                    System.out.println("üìö List of All Courses");
                    List<Course> courses = cc.getAllCourses();
                    System.out.println("\n=========================================================");
                    System.out.printf("| %-5s | %-15s | %-10s | %-12s |\n",
                            "ID", "Course Name", "Duration", "Fees");
                    System.out.println("=========================================================");
                    for (Course c : courses) {
                        System.out.printf("| %-5d | %-15s | %-10d | %-12.2f |\n",
                                c.getCourse_id(), c.getCourseName(), c.getDuration(), c.getFees());
                    }
                    System.out.println("=========================================================");
                    break;
                case 3:
                	System.out.print("Enter course ID to search: ");
                	while (!sc.hasNextInt()) {
                	    System.out.println("Invalid input. Please enter a valid integer for course ID.");
                	    sc.next(); // consume the invalid input
                	}
                	int cid = sc.nextInt();
                	cc.fetchCourseById(cid);

                      break;
                case 4:
                	Scanner scn = new Scanner ( System.in);
                	System.out.print("Enter course ID to update: ");
                    int courseIdUpdateField = 0;
                    try {
                        courseIdUpdateField = scn.nextInt();
                        scn.nextLine();
                    } catch (java.util.InputMismatchException e) {
                        System.out.println("‚ùå Invalid input. Please enter an integer.");
                        scn.nextLine();
                        continue;
                    }

                    System.out.println("Select field to update:");
                    System.out.println("1. Course Name");
                    System.out.println("2. Duration");
                    System.out.println("3. Fees");
                    System.out.print("Enter choice: ");
                    int fieldChoice = 0;

                    try {
                        fieldChoice = scn.nextInt();
                        scn.nextLine();
                    } catch (java.util.InputMismatchException e) {
                        System.out.println("‚ùå Invalid input. Please enter an integer.");
                        scn.nextLine();
                        continue;
                    }

                    System.out.print("Enter new value: ");
                    String newValue = scn.nextLine();

                    try {
                        cc.updateCourseField(courseIdUpdateField, fieldChoice, newValue);
                    } catch (SQLException e) {
                        System.out.println("‚ùå SQL error occurred.");
                        e.printStackTrace();
                    }

                    break;
                case 5:
                	System.out.print("Enter course ID to delete: ");
                	while (!sc.hasNextInt()) {
                	    System.out.println("Invalid input. Please enter a valid integer for course ID.");
                	    sc.next(); // consume the invalid input
                	}
                	int did = sc.nextInt();
                	cc.deleteCourse(did);
                	break;
                case 6:
                    updateAllFields(cc, sc);
                    break;

                case 7:
                    System.out.println("‚úÖ Returning to Main Menu...");
                    break;

                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
                    break;
            }
        } while (choice != 7);
    }
    
    private static void updateSingleField(CourseService courseService, Scanner sc) {
        System.out.print("\nEnter Course ID: ");
        int courseId;
        Scanner scn = new Scanner(System.in); 

        while (true) {
            System.out.print("Enter Course ID: ");
            if (sc.hasNextInt()) {
                courseId = sc.nextInt();
                sc.nextLine(); 
                break;
            } else {
                System.out.println("‚ùå Invalid input. Please enter a valid integer Course ID.");
                sc.nextLine(); 
            }
        }


        System.out.print("Enter the field to update (course_name, duration, fees): ");
        String fieldName = sc.nextLine();

        System.out.print("Enter the new value: ");
        String fieldValue = sc.nextLine();

        // Call updateCourseField from CourseService
        courseService.updateCourseField(fieldName, fieldValue, courseId);
    }
    private static void updateAllFields(CourseService courseService, Scanner sc) {
        System.out.print("\nEnter Course ID: ");
        int courseId = sc.nextInt();
        sc.nextLine(); // Consume the newline character

        System.out.print("Enter new course name: ");
        String courseName = sc.nextLine();

        System.out.print("Enter new duration: ");
        int duration = sc.nextInt();

        System.out.print("Enter new fees: ");
        double fees = sc.nextDouble();

        // Call updateAllCourseDetails from CourseService
        courseService.updateAllCourseDetails(courseName, duration, fees, courseId);
    }
    
    // üìù Manage Enrollment Operations
    private static void manageEnrollments(EnrollmentService es, Scanner scn) throws SQLException {
        int choice;
        do {
            System.out.println("\n--- Manage Enrollments ---");
            System.out.println("1. Enroll Student");
            System.out.println("2. View All Enrollments");
            System.out.println("3. Generate Csv Reports");
            System.out.println("4. Unroll a student");
            System.out.println("5. Update Enrollment Date");
            System.out.println("6. Return to Main Menu");
            System.out.print("Enter your choice: ");

            while (true) {
                System.out.print("Enter your choice: ");
                if (scn.hasNextInt()) {
                    choice = scn.nextInt();
                    scn.nextLine(); // Consume the newline
                    break; // Valid input, break the loop
                } else {
                    System.out.println("‚ùå Invalid input. Please enter a valid integer.");
                    scn.nextLine(); // Consume the invalid input (like a string)
                }
            }

            switch (choice) {
            case 1:
            	int studentId, courseId;

            	// Get valid student ID
            	while (true) {
            	    System.out.print("Enter student ID: ");
            	    if (scn.hasNextInt()) {
            	        studentId = scn.nextInt();
            	        scn.nextLine(); // consume the newline
            	        break;
            	    } else {
            	        System.out.println("‚ùå Invalid input. Please enter a valid integer for student ID.");
            	        scn.nextLine(); // clear the invalid input
            	    }
            	}

            	// Get valid course ID
            	while (true) {
            	    System.out.print("Enter course ID: ");
            	    if (scn.hasNextInt()) {
            	        courseId = scn.nextInt();
            	        scn.nextLine(); // consume the newline
            	        break;
            	    } else {
            	        System.out.println("‚ùå Invalid input. Please enter a valid integer for course ID.");
            	        scn.nextLine(); // clear the invalid input
            	    }
            	}
            	String enrollmentDate;
            	while (true) {
            	    System.out.print("Enter enrollment date (YYYY-MM-DD): ");
            	    enrollmentDate = scn.nextLine();

            	    // Check if the input matches the date format
            	    if (enrollmentDate.matches("^\\d{4}-\\d{2}-\\d{2}$")) {
            	        break;
            	    } else {
            	        System.out.println("‚ùå Invalid format. Please enter date in YYYY-MM-DD format.");
            	    }
            	}

               
                es.enrollStudent(studentId, courseId, enrollmentDate);
                break;

                case 2:

                   List<Enrollment> enrollments =es.getAllEnrollments();

                    System.out.println("üìö List of All Enrollments");
                   System.out.println("\n=========================================================");
                System.out.printf("| %-14s | %-12s | %-12s | %-14s |\n",
                 "Enrollment ID", "Student ID", "Course ID", "Enrollment Date");
                System.out.println("=========================================================");

           for (Enrollment enrollment : enrollments) {
             System.out.printf("| %-14d | %-12d | %-12d | %-14s |\n",
            enrollment.getEnrollmentId(), enrollment.getStudentId(),
            enrollment.getCourseId(), enrollment.getEnrollmentDate());
         }

               System.out.println("=========================================================");
break;
                case 3:
                    List<Enrollment> enrollment =es.printCsvReportToConsole();
                    System.out.println ( " Print csv reports ");

                    break;

                case 4:
                	int studenttId;
                	int courseeId;

                	// Input for Student ID
                	while (true) {
                	    System.out.print("Enter student ID to unenroll: ");
                	    if (scn.hasNextInt()) {
                	        studenttId = scn.nextInt();
                	        scn.nextLine(); // Clear buffer
                	        break;
                	    } else {
                	        System.out.println("‚ùå Invalid input. Please enter a valid integer for student ID.");
                	        scn.nextLine(); // Clear invalid input
                	    }
                	}

                	// Input for Course ID
                	while (true) {
                	    System.out.print("Enter course ID to unenroll from: ");
                	    if (scn.hasNextInt()) {
                	        courseeId = scn.nextInt();
                	        scn.nextLine(); // Clear buffer
                	        break;
                	    } else {
                	        System.out.println("‚ùå Invalid input. Please enter a valid integer for course ID.");
                	        scn.nextLine(); // Clear invalid input
                	    }
                	}

                	es.unenrollStudent(studenttId, courseeId);

break;
                case 5:
                	int studentIdUpdate;
                	int courseIdUpdate;
                	String newEnrollmentDate;

                	// Validate Student ID (Integer)
                	while (true) {
                	    System.out.print("Enter student ID to update: ");
                	    if (scn.hasNextInt()) {
                	        studentIdUpdate = scn.nextInt();
                	        scn.nextLine(); // clear buffer
                	        break;
                	    } else {
                	        System.out.println("‚ùå Invalid input. Please enter a valid integer for student ID.");
                	        scn.nextLine(); // discard invalid input
                	    }
                	}

                	// Validate Course ID (Integer)
                	while (true) {
                	    System.out.print("Enter course ID to update: ");
                	    if (scn.hasNextInt()) {
                	        courseIdUpdate = scn.nextInt();
                	        scn.nextLine(); // clear buffer
                	        break;
                	    } else {
                	        System.out.println("‚ùå Invalid input. Please enter a valid integer for course ID.");
                	        scn.nextLine(); // discard invalid input
                	    }
                	}

                	// Validate Enrollment Date (only using regex)
                	while (true) {
                	    System.out.print("Enter new enrollment date (YYYY-MM-DD): ");
                	    newEnrollmentDate = scn.nextLine();
                	    
                	    if (newEnrollmentDate.matches("^\\d{4}-\\d{2}-\\d{2}$")) {
                	        break; // valid format
                	    } else {
                	        System.out.println("‚ùå Invalid format. Please use YYYY-MM-DD.");
                	    }
                	}

                	es.updateEnrollmentDate(studentIdUpdate, courseIdUpdate, newEnrollmentDate);


                case 6:
                    System.out.println("‚úÖ Returning to Main Menu...");
                    break;

                default:
                    System.out.println("‚ùå Invalid choice! Please try again.");
                    break;
            }
        } while (choice != 6);
    }
}
